<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Btn_Detail" xml:space="preserve">
    <value>更多</value>
  </data>
  <data name="Btn_Return" xml:space="preserve">
    <value>返回</value>
  </data>
  <data name="Error_ENBRunning" xml:space="preserve">
    <value>已有ENB运行中</value>
  </data>
  <data name="Error_PresetNotFound" xml:space="preserve">
    <value>未找到ENB预设</value>
  </data>
  <data name="Error_PresetRunning" xml:space="preserve">
    <value>该预设正在运行</value>
  </data>
  <data name="Error_TESVPathUnset" xml:space="preserve">
    <value>TESV 路径未设置</value>
  </data>
  <data name="Falied_To_Get_Presets_Info" xml:space="preserve">
    <value>读取预设失败</value>
  </data>
  <data name="Intro_CoreVersion" xml:space="preserve">
    <value>ENB核心版本</value>
  </data>
  <data name="Intro_ENBPresetName" xml:space="preserve">
    <value>ENB预设名称</value>
  </data>
  <data name="Intro_FillDefaultCore" xml:space="preserve">
    <value>填入ENB核心版本</value>
  </data>
  <data name="Intro_PresetName" xml:space="preserve">
    <value>ENB预设名称</value>
  </data>
  <data name="Intro_Preset_Available" xml:space="preserve">
    <value>看起来没问题</value>
  </data>
  <data name="Intro_Preset_Unavailable" xml:space="preserve">
    <value>似乎有点问题(大概)</value>
  </data>
  <data name="Intro_SelectInstalledCore" xml:space="preserve">
    <value>选择安装的核心</value>
  </data>
  <data name="Intro_SetRoot" xml:space="preserve">
    <value>设为根目录</value>
  </data>
  <data name="Intro_UseDefaultCore" xml:space="preserve">
    <value>自带的核心</value>
  </data>
  <data name="Intro_UseInstalledCore" xml:space="preserve">
    <value>安装的核心</value>
  </data>
  <data name="Intro_Validation_Required" xml:space="preserve">
    <value>此项必填</value>
  </data>
  <data name="No_Preset_Managed" xml:space="preserve">
    <value>无可用预设</value>
  </data>
  <data name="Preset_Added" xml:space="preserve">
    <value>预设添加成功</value>
  </data>
  <data name="State_Available" xml:space="preserve">
    <value>可用</value>
  </data>
  <data name="State_Running" xml:space="preserve">
    <value>正在运行</value>
  </data>
  <data name="Success_PresetApplyed" xml:space="preserve">
    <value>预设已应用</value>
  </data>
  <data name="Success_PresetRemoved" xml:space="preserve">
    <value>预设已删除</value>
  </data>
  <data name="Success_PresetUnApplyed" xml:space="preserve">
    <value>预设已取消应用</value>
  </data>
  <data name="Unmanaged_ENB" xml:space="preserve">
    <value>存在未经管理的ENB 请清除后继续</value>
  </data>
</root>